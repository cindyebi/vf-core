// vf-ui-fullbleed

// **Thinking about deleting this file?**
// If your component needs no CSS/Sass, we still recommend leaving the
// scss files in place. As this is primarily a CSS framework, it is better to
// leave the empty files so you know a file wasn't accidently omitted.
// If you don't have any Sass, you can trim this block down to:
// "This page was intentionally left blank"

@import 'package.variables.scss';
// Debug information from component's `package.json`:
// ---
/*!
 * Component: #{map-get($componentInfo, 'name')}
 * Version: #{map-get($componentInfo, 'version')}
 * Location: #{map-get($componentInfo, 'location')}
 */

@import 'vf-u-fullbleed.variables.scss';

/*
 * 1. position: relative is needed for the pseudo element.
 * 2. make the background colour inherit from classanmes in use.
 * 3. if we can a full bleed background inline with other content we need to reset
 *    the grid to fill all that space.
 * 4. make the pseudo element 100% of the element so we can see it.
 * 5. push the pseudo element away from the left of the viewport.
 * 6. If the component has vertical padding we need to make sure the pseudo element
 *    is set to the top of the containing box.
 * 7. make the pseudo element full-width.
 * 8. put the pseudo element 'underneath' the element so it doesn't block.
 * 9. Because Windows always shows scrollbars this technique creats a horizontal
 *    scroll bar, we need to apply position: relative; to a parent element.
      Encapsulating this CSS rule inside the component means it would only be set
      if the site includes this component and it's CSS.
 */

.vf-u-fullbleed {
  position: relative; /* 1 */

  &::before {
    background-color: inherit; /* 2 */
    content: '';
    grid-column: 1 / -1; /* 3 */
    height: 100%; /* 4 */
    margin-left: calc(50% - 50vw); /* 5 */
    position: absolute;
    top: 0; /* 6 */
    width: 100vw; /* 7 */
    z-index: -1; /* 8 */
  }

  @at-root body {
    position: relative; /* 9 */
  }
}
